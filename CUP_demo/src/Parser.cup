package lang.parser;

import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;
import ast.*;

parser code {:
	
	public static Lexer makeLexer(String input) throws Exception {
		return new Lexer(new StringReader(input));
	}
	
	public static Parser makeParser(String input) throws Exception {
		return new Parser(makeLexer(input));
	}
	
	public static Object parseString(String input) throws Exception {
		Parser parser = Parser.makeParser(input);
		Symbol result = parser.parse();
		return result.value;
	}
	
:}

// Rules

terminal P1;
terminal P2;
terminal COLON;
terminal COMMA;
terminal EOL;
terminal INTERSECCION, UNION,
		 CONCATENACION, DIFERENCIA,
		 FILTRO, ATTRIBUTES, ELEMENTS;
terminal Float num;
terminal String id;
terminal String str;
terminal Boolean bool;
terminal String fil;

non terminal Objeto obj;
non terminal Objeto lista;
non terminal Objeto root;

non terminal Object valor;

non terminal List expresion;

root ::= obj:o EOL {: RESULT = new Objeto("root"); RESULT.addElem(o); :}
		| root:r obj:o EOL {: RESULT = r; RESULT.addElem(o); :}
		;
obj ::= id:tag P1 lista:l P2 
			{: RESULT = l; RESULT.setTag(tag); :}
		| id:tag P1 P2 {: RESULT = new Objeto(); RESULT.setTag(tag); :}
		;
lista ::= id:i COLON valor:v 
			{: RESULT = new Objeto(); RESULT.addAttr(i,v); :}
		| valor:v {: RESULT = new Objeto(); RESULT.addElem(v); :}
		| lista:l COMMA id:i COLON valor:v
			{: RESULT = l; RESULT.addAttr(i,v); :}
		| lista:l COMMA valor:v 
			{: RESULT = l; RESULT.addElem(v); :}
		;
valor ::= bool:b {: RESULT = b; :}
		| num:n {: RESULT = n; :}
		| str:s {: RESULT = s; :}
		| obj:o {: RESULT = o; :}
		;
expresion ::= valor:v {: RESULT = new ArrayList(); RESULT.add(v); :}
			| P1 expresion:e P2 {: RESULT = e; :}
			| expresion:e1 INTERSECCION expresion:e2 
				{: RESULT = Interseccion(e1,e2).getList(); :}
			| expresion:e1 UNION expresion:e2 
				{: RESULT = Union(e1,e2).getList(); :}
			| expresion:e1 CONCATENACION expresion:e2
				{: RESULT = Concatenacion(e1,e2).getList(); :}
			| expresion:e1 DIFERENCIA expresion:e2
				{: RESULT = Diferencia(e1,e2).getList(); :}
			| expresion:e FILTRO fil 
				{: RESULT = Filtro(e1,fil).getList(); :}
			| expresion:e ATTRIBUTES 
				{: RESULT = Attributes(e).getList(); :}
			| expresion:e ELEMENTS
				{: RESULT = Elements(e).getList(); :}
			;