package lang.parser;

import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;
import ast.*;

parser code {:
	
	public static Lexer makeLexer(String input) throws Exception {
		return new Lexer(new StringReader(input));
	}
	
	public static Parser makeParser(String input) throws Exception {
		return new Parser(makeLexer(input));
	}
	
	public static Object parseString(String input) throws Exception {
		Parser parser = Parser.makeParser(input);
		Symbol result = parser.parse();
		return result.value;
	}
	
:}

// Rules

terminal P1, P2, COLON, COMMA;
terminal INTERSECTION, UNION,
		 CONCATENATION, DIFFERENCE,
		 FILTER, ATTRIBUTES, ELEMENTS;
terminal Float num;
terminal String id;
terminal String string;
terminal Boolean boolean;
terminal Map attributes;
terminal List elements;
terminal Objeto obj;

non terminal valor;
non terminal lista;

obj ::= id:i P1 lista:l P2
		{: RESULT = new Objeto(i); RESULT.:}
		;
lista ::= id:i COLON valor:v 
			{: RESULT = new Objeto(); RESULT.addAtt(i,v); :}
		| valor:v {: RESULT = new Objeto(); RESULT.addElem(v); :}
		;
valor ::= string:s {: RESULT = s; :}
		| num:n {: RESULT = n; :}
		| boolean:b {: RESULT = b; :}
		;